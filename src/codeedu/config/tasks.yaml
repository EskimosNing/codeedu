# /**
#  * @ Author: Jianing ZHAO
#  * @ Create Time: 2025-05-26 17:54:25
#  * @ Modified by: Jianing ZHAO
#  * @ Modified time: 2025-05-28 14:08:36
#  * @ Description:
#  */
research_task:
  description: >
    针对用户指定的主题进行深入调研。
    请确保你找到所有有价值、有趣且相关的最新信息。
  expected_output: >
    返回一个包含 10 条要点的列表，总结该主题下最重要、最相关的内容。
  agent: researcher



reporting_task:
  description: >
    请基于上下文中的调研内容（已经完成）和生成的教学内容（如有）以及用户输入的 {user_input}撰写 Markdown 报告。
    在撰写前，请总结前一步所有内容（包括调研和教学），**将其插入到报告正文开头部分**。
    然后生成完整报告，并保存为 .md 文件至 output/ 文件夹中。
  expected_output: >
    你需要将前面 agent（如教育专家、调研专家、程序员）生成的内容整合进来，形成一份完整报告。

    报告结构如下：
    - 引言部分总结上一步生成的内容（例如教学解释、调研要点、代码讲解）；
    - 代码部分：展示完整 Python 示例代码；
    - 用户输入的 {user_input}如果有出题的需求则列出生成的练习题；
    - 结尾：总结知识点与练习价值。

    ⚠️ 注意：正文应以 Markdown 格式输出；代码应嵌入 markdown；不要只展示代码，要让代码成为整体讲解中的一部分。
    
    然后应该输出一段自然语言文本，其中包括：
    1. 一句简短总结：这份报告的主要内容或主题概述；
    2. 保存路径：说明文件已保存至服务器你现在可以下载；
    3. 提示语：引导用户点击查看或下载报告，需附上文件内容本身格式为markdown。代码部分需要代码块包裹。
    示例输出：
    ✅ 报告已生成，内容总结如下：  
    本报告详细分析了 AI 在教育中的应用场景，包括自适应学习、自动评分与智能辅导等。  
    📁 文件已保存至服务器你现在可以下载。  
    📥 点击下载或在下方查看完整报告内容。
    文件内容
  agent: reporting_analyst





distribute_task:
  description: >
    根据用户输入的 {user_input}，结合提供的 {agents} 和 {tasks} 信息，
    判断用户的真实意图，选择最合适的智能体（agents）和任务（tasks）进行分配。
  expected_output: >
    {
      "distribution_config": {
        "agents": [
          {"id": "educator", "configuration": {...}}
        ],
        "tasks": [
          {"id": "education_task", "configuration": {...}}
        ]
      }
    }
  agent: planner



code_task:
  description: >
    请结合上下文 {context} 和当前用户输入 `{user_input}` 的自然语言编程请求，完成以下步骤：
    - 自动生成一段可运行的 Python 脚本来解决问题；
    - 判断是否需要保存代码或结果，如需要请使用 FileWriterTool 将脚本保存在 output/ 目录下；
    - 执行代码并捕获输出（如有）；
    - 最终请使用自然语言方式进行总结：
      - 如果保存了文件，请列出文件路径与脚本功能摘要；
      - 如果未保存文件，请以 markdown 格式展示代码，并简要描述其作用。
  expected_output: >
    先输出你生成的代码
    请以自然语言输出，满足以下之一：
    ✅ 如果生成了文件
    - 请用 markdown 格式展示生成的 Python 代码
    - 说明文件已保存至服务器你现在可以下载。
    - 简要介绍该脚本实现了什么功能
    ✅ 如果未保存文件
    - 请用 markdown 格式展示生成的 Python 代码
    - 说明代码的功能与用途
  agent: programmer



education_task:
  description: >
    请结合用户当前的问题 {user_input} 和之前的上下文 {context}，进行清晰、系统的讲解。
    如有必要，可以附带 Python 代码示例说明
    如需要保存将讲解内容使用FileWriterTool工具保存文件在 output/ 目录下。
  expected_output: >
    1. 📘 知识讲解正文
    2. 💡 代码示例（如适用）
    3. 💾 保存提示（如用户请求）📁 示例代码已保存至服务器你现在可以下载。
  agent: educator




generate_quiz_task:
  description: >
    请结合教学主题 {user_input} 与之前的上下文 {context}，
    生成高质量的编程练习题集，包含题目、示例，不要生成答案。
    需要出的题目数量根据 {user_input} 判断，默认只出一道题。
    如需要保存请使用 FileWriterTool 将文件保存在 output/ 目录下。
  expected_output: >
    输出生成题目内容
    - ✅ 编号 + 类型
    - ❓ 题干
    - 💬 示例（用例）
    如保存：📁 练习题已保存至服务器你现在可以下载  
    📥 点击下载查看完整题集
  agent: educator

greeting_task:
  description: >
    用户发送的是一句寒暄、提问或者开放式交流（如'你刚刚在做什么'或'你是谁'）
    你需要结合下面这些历史上下文 {context}，以自然、有温度的方式继续交流
    如果上下文中包含你刚刚完成的任务或生成的内容（如生成了代码、报告、题目），你可以自然地提到并简要总结
    否则请保持轻松交流风格，不要引入复杂任务话题，除非用户明确表达需求
    请注意：
    - 语言自然亲切，可适当加入 emoji
    - 不要强行执行任务型回应
    - 支持持续聊天，逐步引导用户探索更多功能
  expected_output: >
    一段自然语言回复，符合上下文语气，继续与用户交流
    可提及你最近做了什么
    若无明确上下文，请简单介绍你支持的功能
  agent: chat_agent
