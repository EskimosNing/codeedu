# 快速排序（Quick Sort）

## 定义
快速排序是一种高效的排序算法，它采用分治法策略，将一个数组分成两个子数组，分别对它们进行排序，最后合并成一个有序数组。它是非常经典的排序算法之一，在很多实际应用中都占有重要地位。

## 原理
快速排序的核心思想是选取一个基准元素（pivot），然后通过一趟排序将待排序数组划分为两个子数组：
- 左子数组中的元素均小于基准元素
- 右子数组中的元素均大于基准元素

接着，递归地对这两个子数组进行快速排序，直到每个子数组的大小为1或0（自然有序）。

### 快速排序的步骤
1. **选择基准**：从数组中选择一个元素作为基准，常用的选择方法是取第一个元素、最后一个元素或随机选择。
2. **分区操作**：将数组重新排序，将所有小于基准的元素移到基准的左边，将所有大于基准的元素移到基准的右边。分区操作完成后，基准元素即位于它最终的位置上。
3. **递归排序**：对左子数组和右子数组递归执行相同的排序过程，直到子数组的大小为1或0。

## 应用
快排在大多数实际应用中表现出色，尤其是当数据量较大时，通过均匀分区，快排的平均时间复杂度为 \(O(n \log n)\)。它常常用于：
- 在内存中排序大型数据集
- C++ STL 标准库中的 `std::sort`
- 在许多编程语言的库中作为默认排序算法

## Python 示例
以下是快速排序的 Python 实现：
```python
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) // 2]  # 选择基准
        left = [x for x in arr if x < pivot]  # 小于基准的元素
        middle = [x for x in arr if x == pivot]  # 等于基准的元素
        right = [x for x in arr if x > pivot]  # 大于基准的元素
        return quick_sort(left) + middle + quick_sort(right)  # 递归排序并合并

# 测试快速排序
sample_array = [3, 6, 8, 10, 1, 2, 1]
sorted_array = quick_sort(sample_array)
print(sorted_array)  # 输出：[1, 1, 2, 3, 6, 8, 10]
```
这段代码展示了如何使用快速排序对一个示例数组进行排序。希望这段讲解能帮助您理解快速排序的基本原理及应用。